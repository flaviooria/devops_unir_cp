pipeline {
    agent none

    options {
        skipDefaultCheckout true //avoid auto checkout in slaves nodes
    }

    environment {
        PYTHONPATH = '.'
        PATH_VENV = '/opt/venv/bin'
        PATH_JMETER = '/opt/jmeter/bin'
        FLASK_APP = 'app/api.py'
    }

    stages {
        stage('Checkout code') {
            agent {
                label 'agent_principal'
            }

            steps {
                showAgentInfo()

                git 'https://github.com/flaviooria/devops_unir_cp.git'

            }
            post {
                cleanup {
                    cleanWs();
                }
                success {
                    stash name: 'source_code', includes: '**'
                }
            }
        }

        stage('Run unit test') {
            agent {
                label 'agent1'
            }

            steps {
                showAgentInfo()
                unstash 'source_code'

                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh '$PATH_VENV/coverage run --branch --source=./app --omit=app/__init__.py,app/api.py -m pytest --junitxml=result-unit.xml test/unit'
                    sh '$PATH_VENV/coverage xml'
                }

                junit 'result-unit.xml'
            }
            post {
                cleanup {
                    cleanWs();
                }
                success {
                    stash name: 'coverage_report', includes: 'coverage.xml'
                    stash name: 'coverage_exec', includes: '.coverage'
                }
            }
        }

        stage('Coverage') {
            agent {
                label 'agent2'
            }

            steps {
                showAgentInfo()
                unstash 'source_code'
                unstash 'coverage_report'
                unstash 'coverage_exec'

                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    sh '$PATH_VENV/coverage report'

                    // Formato de baremos cobertura: healthy, unstable, failed => 95, 85, 85 
                    cobertura autoUpdateHealth: false, autoUpdateStability: false, onlyStable: false, coberturaReportFile: 'coverage.xml', conditionalCoverageTargets: '100,0,90', lineCoverageTargets: '100,0,95'
                }
            }
            post {
                cleanup {
                    cleanWs();
                }
            }
        }

        stage('Static & Security & Performance') {

            parallel {

                stage('Static') {

                    agent {
                        label 'agent1'
                    }

                    steps {
                        showAgentInfo()

                        unstash 'source_code'

                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            sh '$PATH_VENV/flake8 --format=pylint --exit-zero ./app > flake8.out'

                            recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out', reportEncoding: 'UTF-8')], qualityGates: [
                                [threshold: 8.0, type: 'TOTAL', unstable: true],
                                [threshold: 10.0, type: 'TOTAL', unstable: false]
                            ]
                        }
                    }
                    post {
                        cleanup {
                            cleanWs();
                        }
                    }
                }

                stage('Security') {

                    agent {
                        label 'agent2'
                    }

                    steps {
                        showAgentInfo()

                        unstash 'source_code'

                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            sh '$PATH_VENV/bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {severity} {msg}"'

                            recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: [
                                [unstable: true, threshold: 2.0, type: 'TOTAL'],
                                [unstable: false, threshold: 4.0, type: 'TOTAL']
                            ]
                        }
                    }
                    post {
                        cleanup {
                            cleanWs();
                        }
                    }
                }

                stage('Performance') {

                    agent {
                        label 'agent1'
                    }

                    steps {
                        showAgentInfo()

                        unstash 'source_code'

                        sh '$PATH_VENV/flask run &' // Run the app in the background
                        sh 'sleep 3' // Wait for the app to start

                        sh '$PATH_JMETER/jmeter -n -t test/jmeter/flask.jmx -f -l flask.jtl'

                        perfReport sourceDataFiles: 'flask.jtl'
                    }
                    post {
                        cleanup {
                            cleanWs();
                        }
                    }
                }

            }
        }

    }
}

def showAgentInfo() {
    script {
        sh '''
        echo "Current user: $(whoami)"
        echo "Current host: $(hostname)"
        echo "Workspace: $WORKSPACE"
        '''
    }
}